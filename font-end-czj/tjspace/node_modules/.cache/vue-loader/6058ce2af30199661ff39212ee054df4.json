{"remainingRequest":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/cache-loader/dist/cjs.js??ref--0-1!/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/src/components/layout.vue?vue&type=template&id=ecebbf8c&","dependencies":[{"path":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/src/components/layout.vue","mtime":1596850427559},{"path":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js","mtime":499162500000},{"path":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenzijie/Downloads/数据库课程设计/TJSPACE/TJSPACE_2020/font-end/tjspace/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}